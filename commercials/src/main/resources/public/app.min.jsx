var app = angular.module('commercialsApp', [
    'ui.router',
    'ui.bootstrap',
    'ui.grid',
    'ui.grid.pagination'
]);

var appPath = '/commercials';
var serverUrl = 'http://' + window.location.host;
var server = serverUrl + appPath;

app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', function($stateProvider, $urlRouterProvider, $httpProvider) {
    $httpProvider.interceptors.push(function($q, $rootScope) {
        return {
            'responseError': function(rejection){
                var defer = $q.defer();

                if(rejection.status == 401){
                    window.location = '#/login';
                    $rootScope.errorMessage = "Please LogIn";
                    return;
                }

                if(rejection.status == 400){
                    $rootScope.errorMessage = "Error occured: " + rejection.data;
                }

                if(rejection.status == 500){
                    $rootScope.errorMessage = "Internal server error, please contact developers:  " + rejection.data;
                }

                defer.reject(rejection);

                return defer.promise;
            }
        };
    });

    $urlRouterProvider.otherwise('list');

    $stateProvider.state('login', {
        url: '/login',
        templateUrl: appPath + '/template/login.html',
        controller: 'loginController'
    });

    $stateProvider.state('logout', {
        url: '/logout',
        controller: ['$state', '$http', '$rootScope', function($state, $http, $rootScope){
            $http({
                'url': server + '/auth/logout',
                'method': 'GET'
            }).then(function(response) {
                if(response.status == 200) {
                    $rootScope.user = null;
                    $state.go('login');
                } else {
                    console.log(response);
                }
            });
        }]
    });

    $stateProvider.state('profile',{
        url: '/profile',
        templateUrl: appPath + '/template/profile.html'
    });

    $stateProvider.state('list', {
        url: '/list',
        templateUrl: appPath + '/template/commercial_list.html',
        controller: 'listController'
    });

    $stateProvider.state('create', {
        url: '/create',
        templateUrl: appPath + '/template/commercial_create.html',
        controller: 'createController'
    });

    $stateProvider.state('details', {
        url: '/details/:commercialId',
        templateUrl: appPath + '/template/commercial_details.html',
        controller: 'detailsController'
    });

    $stateProvider.state('edit', {
        url: '/edit/:commercialId',
        templateUrl: appPath + '/template/commercial_edit.html',
        controller: 'editController'
    });

    $stateProvider.state('data', {
        url: '/data/:commercialId',
        templateUrl: appPath + '/template/commercial_data.html',
        controller: 'dataController'
    });

    $stateProvider.state('recalculate', {
        url: '/recalculate/:commercialId',
        templateUrl: appPath + '/template/commercial_recalculate.html',
        controller: 'recalculateController'
    });

    $stateProvider.state('change-list', {
        url: '/change-list/:commercialId',
        templateUrl: appPath + '/template/commercial_changelist.html',
        controller: 'changeListController'
    });

    $stateProvider.state('delete', {
        url: '/delete/:commercialId',
        templateUrl: appPath + '/template/commercial_delete.html',
        controller: 'deleteController'
    });

    $stateProvider.state('recalculate-all', {
        url: '/recalculate-all',
        templateUrl: appPath + '/template/commercial_recalculate_all.html',
        controller: 'recalculateAllController'
    });

    $stateProvider.state('user-list', {
        url: '/user-list',
        templateUrl: appPath + '/template/user_list.html',
        controller: 'userListController'
    });

    $stateProvider.state('user-create', {
        url: '/user-create',
        templateUrl: appPath + '/template/user_create.html',
        controller: 'userCreateController'
    });

    $stateProvider.state('user-edit', {
        url: '/user/:userId',
        templateUrl: appPath + '/template/user_edit.html',
        controller: 'userEditController'
    });
    
}]).run(function($http, $rootScope){
    $http({
        'method' : 'GET',
        'url': server + '/api/users/current'
    }).then(function(response){
        $rootScope.user = response.data;
    });

    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){
        $rootScope.errorMessage = null;
    });
});




app.controller('changeListController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.commercialId = $stateParams.commercialId;
    $scope.state = 'change-list';
    $http({
        "method": 'GET',
        "url": server + '/api/commercials/' + $scope.commercialId
    }).then(function(response) {
        $scope.commercial = response.data;
    }, function(response) {});

    $http({
        "method": 'GET',
        "url": server + '/api/commercials/' + $scope.commercialId + '/change-logs/'
    }).then(function(response) {
        $scope.changeLogs = response.data;
    }, function(response) {});
}]);
app.controller('createController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.commercial = new Commercial();
    $scope.fieldNameList = FIELD_NAMES_LIST;
    $http({
        'method': 'GET',
        'url': server + '/api/tracking-records/media-sources'
    }).then(function(response) {
        $scope.mediaSources = response.data;
        console.log($scope.mediaSources);
    }, function(response){});

    $http({
        'method': 'GET',
        'url': server + '/api/tracking-records/offer-ids'
    }).then(function(response) {
        $scope.offerIds = response.data;
        console.log($scope.offerIds);
    }, function(response){});

    $http({
        'method': 'GET',
        'url': server + '/api/tracking-records/field-values'
    }).then(function(response) {
        console.log(response.data);
        $scope.fieldValues = response.data;
    }, function(response){});

    $scope.submit = function() {
        console.log($scope.commercial);

        if($scope.commercial.amount == null || $scope.commercial.amount == 0) {
            return false;
        }

        $http({
            'method': 'POST',
            'url': server + '/api/commercials',
            'data': $scope.commercial
        }).then(function(response) {
            $state.go('details', {commercialId: response.data.id});
        }, function(response){

        });
    };

    $scope.deleteCondition = function(condition) {
        $scope.commercial.conditions = $scope.commercial.conditions.filter(function (element) {
            return element.fieldName != condition.fieldName;
        });
    };

    $scope.addCondition = function() {
        $scope.commercial.conditions.push(new TargetCondition(Operator.EQUALS, 'ad_id', '', false));
    };
}]);

app.controller('dataController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.state = 'data';
    $scope.commercialId = $stateParams.commercialId;

    $http({
        "method": 'GET',
        "url": server + '/api/commercials/' + $scope.commercialId
    }).then(function(response) {
        $scope.commercial = response.data;
        $scope.commercial.dateStart = new Date($scope.commercial.dateStart);
        $scope.commercial.dateEnd = new Date($scope.commercial.dateEnd);
    }, function(response) {});

    $http({
        "method": 'GET',
        "url": server + '/api/tracking-records/' + $scope.commercialId
    }).then(function(response) {
        $scope.commercialData = response.data;
    }, function(response) {});
}]);
app.controller('deleteController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.state = 'delete';
    $scope.commercialId = $stateParams.commercialId;

    $http({
        "method": 'GET',
        "url": server + '/api/commercials/' + $scope.commercialId
    }).then(function(response) {
        $scope.commercial = response.data;
        $scope.commercial.dateStart = new Date($scope.commercial.dateStart);
        $scope.commercial.dateEnd = new Date($scope.commercial.dateEnd);
    }, function(response) {});

    $scope.deleteCommercial = function() {
        $http({
            'method': 'DELETE',
            'url': server + '/api/commercials/' + $scope.commercialId
        }).then(function() {
            $state.go('list');
        }, function() {});
    }
}]);
 app.controller('detailsController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.commercialId = $stateParams.commercialId;
    $scope.state = 'details';
    $http({
        "method": 'GET',
        "url": server + '/api/commercials/' + $scope.commercialId
    }).then(function(response) {
        $scope.commercial = response.data;
    }, function(response) {});

    $scope.copyAndClose = function () {
        $http({
            'method': 'POST',
            'url': server + '/api/commercials/' + $scope.commercialId + '/copy'
        }).then(function (response) {
            console.log(response);
            $state.go("details", {'commercialId' : response.data.id});
        }, function (response) {
            console.log("error");
            console.log(response);
        })
    }
}]);
app.controller('editController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.commercialId = $stateParams.commercialId;
    $scope.state = 'edit';
    $scope.fieldNameList = FIELD_NAMES_LIST;

    $http({
        'method': 'GET',
        'url': server + '/api/tracking-records/media-sources'
    }).then(function(response) {
        $scope.mediaSources = response.data;
        console.log($scope.mediaSources);
    }, function(response){});

    $http({
        'method': 'GET',
        'url': server + '/api/tracking-records/offer-ids'
    }).then(function(response) {
        $scope.offerIds = response.data;
        console.log($scope.offerIds);
    }, function(response){});

    $http({
        'method': 'GET',
        'url': server + '/api/tracking-records/field-values'
    }).then(function(response) {
        console.log(response.data);
        $scope.fieldValues = response.data;
    }, function(response){});

    $http({
        "method": 'GET',
        "url": server + '/api/commercials/' + $scope.commercialId
    }).then(function(response) {
        $scope.commercial = response.data;
        $scope.commercial.dateStart = new Date($scope.commercial.dateStart);
        $scope.commercial.dateEnd = new Date($scope.commercial.dateEnd);
    }, function(response) {});

    $scope.submit = function() {
        console.log($scope.commercial);

        if($scope.commercial.amount == null || $scope.commercial.amount == 0) {
            return false;
        }

        $http({
            'method': 'PUT',
            'url': server + '/api/commercials/' + $scope.commercialId,
            'data': $scope.commercial
        }).then(function(response) {
            $state.go('details', {commercialId: $scope.commercialId});
        }, function(response){

        });
    };

    $scope.deleteCondition = function(condition) {
        $scope.commercial.conditions = $scope.commercial.conditions.filter(function (element) {
            return element.fieldName != condition.fieldName;
        });
    };

    $scope.addCondition = function() {
        $scope.commercial.conditions.push(new TargetCondition(Operator.EQUALS, 'ad_id', '', false));
    };
}]);
app.controller('listController', ['$scope', '$interval', '$state', '$http', function($scope, $interval, $state, $http) {
    $scope.state = 'list';

    $http({
        "method": 'GET',
        "url": server + '/api/commercials'
    }).then(function(response) {
        $scope.commercials = response.data;
        for(var i = 0; i < $scope.commercials.length; i++) {
            $scope.commercials[i].dateStart = new Date($scope.commercials[i].dateStart);
            $scope.commercials[i].dateEnd = new Date($scope.commercials[i].dateEnd);
            $scope.commercials[i].isActive = $scope.commercials[i].dateEnd ? 'Yes' : 'No';

            $scope.commercials[i].siteId = '*';
            $scope.commercials[i].campaignName = '*';

            if($scope.commercials[i]['conditions'] != null) {
                for(var j = 0; j < $scope.commercials[i]['conditions'].length; j++) {
                    if($scope.commercials[i]['conditions'][j].fieldName == 'campaign_name') {
                        $scope.commercials[i].campaignName = $scope.commercials[i]['conditions'][j].fieldValue;
                    }

                    if($scope.commercials[i]['conditions'][j].fieldName == 'site_id') {
                        $scope.commercials[i].siteId = $scope.commercials[i]['conditions'][j].fieldValue;
                    }
                }
            }
        }

        $scope.gridOptions.data = response.data;
    }, function(response) {});

    $scope.gridOptions = {
        useExternalFiltering: true,
        enableHorizontalScrollbar: 0,
        enableVerticalScrollbar: 0,
        paginationPageSize: 25,
        paginationPageSizes: [25, 50, 100],
        columnDefs: [
            {
                field: 'id', 
                displayName: 'ID', 
                type: 'number',
                cellTemplate: '<div class="ui-grid-cell-contents" tooltip = "{{row.entity.id}}" tooltip-append-to-body="true" tooltip-popup-delay="400" ><a ui-sref="details({commercialId: row.entity.id})">{{row.entity.id}}</a></div>',
                cellFilter: 'number'
            },
            {
                field: 'offerId',
                displayName: 'Offer ID',
                cellTemplate: '<div class="ui-grid-cell-contents" tooltip = "{{COL_FIELD}}" tooltip-append-to-body="true" tooltip-popup-delay="400" >{{ COL_FIELD }}</div>'
            },
            {
                field: 'mediaSource',
                displayName: 'Media Source',
                cellTemplate: '<div class="ui-grid-cell-contents" tooltip = "{{COL_FIELD}}" tooltip-append-to-body="true" tooltip-popup-delay="400" >{{ COL_FIELD }}</div>'
            },
            {
                field: 'dateStart',
                displayName: 'Start',
                cellFilter: 'date:\'yyyy-MM-dd\'',
            },
            {field: 'dateEnd', displayName: 'End', cellFilter: 'date:\'yyyy-MM-dd\''},
            {field: 'eventType', displayName: 'Event'},
            {field: 'type', displayName: 'Type'},
            {field: 'amount', displayName: 'Amount', type: 'number', cellFilter: 'currency'},
            {field: 'isActive', displayName: 'Active?'},
            {
                field: 'campaignName',
                displayName: 'Campaign Name',
                cellTemplate: '<div class="ui-grid-cell-contents" tooltip = "{{COL_FIELD}}" tooltip-append-to-body="true" tooltip-popup-delay="400" >{{ COL_FIELD }}</div>'
            },
            {field: 'siteId', displayName: 'Site ID'},
            {
                field: 'updatedOn', displayName: 'Updated On', cellFilter: 'date:\'yyyy-MM-dd hh:mm:ss\''
            }
        ]
    };

    $scope.gridOptions.onRegisterApi = function (gridApi) {
        $scope.gridApi = gridApi;

        $scope.gridApi.grid.registerRowsProcessor(function(renderableRows) {
            console.log("render");
            renderableRows.forEach(function (row) {
                var show = true;
                var entity = row.entity;
                for(var filterName in $scope.filters) {
                    if($scope.filters.hasOwnProperty(filterName) && $scope.filters[filterName].value != '') {
                        var filter = $scope.filters[filterName];
                        switch(filter.type) {
                            case 'date':
                                var timestamp_expected = filter.value.getTime();
                                var timestamp_current = entity[filter.id].getTime();
                                switch(filter.operator) {
                                    case 'equals':
                                        if(timestamp_expected != timestamp_current) {
                                            show = false;
                                        }
                                        break;
                                    case 'gte':
                                        if(timestamp_expected != timestamp_current && !(timestamp_current > timestamp_expected)) {
                                            show = false;
                                        }
                                        break;
                                    case 'lte':
                                        if(timestamp_expected != timestamp_current && !(timestamp_current < timestamp_expected)) {
                                            show = false;
                                        }
                                        break;
                                }
                                break;
                            case 'string':
                                if(String(entity[filter['id']]).toLowerCase().indexOf(filter.value.toLowerCase()) == -1) {
                                    show = false;
                                }
                                break;
                            case 'enum':
                                if(entity[filter['id']] != filter.value) {
                                    show = false;
                                }
                                break;
                        }
                    }
                }

                row.visible = show;
            });
            return renderableRows;
        }, 100);
    };

    $scope.applyFilters = function() {
        $scope.gridApi.grid.refresh();
    };

    $scope.filters = {
        'offerId': {
            id: 'offerId',
            name: 'Offer ID',
            value: '',
            operator: 'equals',
            type: 'string'
            // operators: contains equals
        },
        'mediaSource': {
            id: 'mediaSource',
            name: 'Media Source',
            value: '',
            operator: 'equals',
            type: 'string'
            // operators: contains equals
        },
        'startDate': {
            id: 'dateStart',
            name: 'Start Date',
            value: '',
            operator: 'equals',
            type: 'date'
            // operators: = >= <=
        },
        'endDate': {
            id: 'dateEnd',
            name: 'Ending Date',
            value: '',
            operator: 'equals',
            type: 'date'
            // operators: = >= <=
        },
        'eventType': {
            id: 'eventType',
            name: 'Event Type',
            value: '',
            operator: 'equals',
            type: 'enum',
            options: [
                {
                    name: 'All',
                    value: ''
                },
                {
                    name: 'First Deposit',
                    value: 'FIRST_DEPOSIT'
                },
                {
                    name: 'Install',
                    value: 'INSTALL'
                },
                {
                    name: 'Retention Deposit',
                    value: 'RETENTION_DEPOSIT'
                },
                {
                    name: 'Sign Up',
                    value: 'SIGN_UP'
                }
            ]
            // operators: select: First Deposit, Install, Retention Deposit, Sign Up
        },
        'type': {
            id: 'type',
            name: 'Commercial Type',
            value: '',
            operator: 'equals',
            type: 'enum',
            options: [
                {
                    name: 'All',
                    value: ''
                },
                {
                    name: 'Payout (we pay)',
                    value: 'PAYOUT'
                },
                {
                    name: 'Revenue (we get paid)',
                    value: 'REVENUE'
                }
            ]
            // operators: select: payout, revenue
        },
        'isActive': {
            id: 'isActive',
            name: 'Is Active',
            value: '',
            operator: 'equals',
            type: 'enum',
            options: [
                {
                    name: 'All',
                    value: ''
                },
                {
                    name: 'Yes',
                    value: 'Yes'
                },
                {
                    name: 'No',
                    value: 'No'
                }
            ]
            // operators: select: Yes, No
        },
        'campaignName': {
            id: 'campaignName',
            name: 'Campaign Name',
            value: '',
            operator: 'equals',
            type: 'string'
            // operators: contains, equals
        },
        'siteId': {
            id: 'siteId',
            name: 'Site ID',
            value: '',
            operator: 'equals',
            type: 'string'
            // operators: contains, equals
        }
    };
    $scope.clearFilters = function() {
        for(var filterName in $scope.filters) {
            if($scope.filters.hasOwnProperty(filterName)) {
                $scope.filters[filterName].value = '';
            }
        }
        $scope.applyFilters();
    };
}]);
app.controller('recalculateController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.state = 'recalculate';
    $scope.commercialId = $stateParams.commercialId

    $http({
        "method": 'GET',
        "url": server + '/api/commercials/' + $scope.commercialId
    }).then(function(response) {
        $scope.commercial = response.data;
        $scope.commercial.dateStart = new Date($scope.commercial.dateStart);
        $scope.commercial.dateEnd = new Date($scope.commercial.dateEnd);
    }, function(response) {});



    $scope.reloadTasks = function() {
        $http({
            'method': 'GET',
            'url': server + '/api/commercials/' + $scope.commercialId + '/recalculation-tasks'
        }).then(function(response){
            $scope.tasks = response.data;
            for(var i = 0; i < $scope.tasks.length; i++) {
                $scope.tasks[i].createdOn = new Date($scope.tasks[i].createdOn);
                $scope.tasks[i].startedOn = new Date($scope.tasks[i].startedOn);
                $scope.tasks[i].finishedOn = new Date($scope.tasks[i].finishedOn);
            }
        }, function(response){});
    };

    $scope.reloadTasks();

    $scope.startRecalculation = function() {
        console.log("starting recalculation");
        $http({
            'method': 'POST',
            'url': server + '/api/commercials/' + $scope.commercialId + '/recalculation-tasks'
        }).then(function (response) {
            console.log(response.data);
            $scope.reloadTasks();
        }, function(response) {});

    };
}]);
app.controller('loginController', ['$scope', '$interval', '$state', '$http', '$rootScope', function($scope, $interval, $state, $http, $rootScope) {
    $scope.logIn = function () {
        $http({
            'url': server + '/auth/login?username=' + $scope.username + '&password=' + $scope.password,
            'method': 'GET'
        }).then(function (response) {
            console.log(response);
            if(response.status == 200) {
                $rootScope.user = response.data;

                console.log($rootScope.user);
                $state.go('list');
            }
        }, function() {})
    };
}]);
app.controller('recalculateAllController', ['$scope', '$interval', '$state', '$http', '$stateParams', function($scope, $interval, $state, $http, $stateParams) {
    $scope.startGlobalRecalculation = function() {
        $http({
            'method': 'POST',
            'url': server + '/api/commercials/global-recalculation-task'
        }).then(function () {
            $scope.reloadTasks();
        });
    };

    $scope.reloadTasks = function() {
        $http({
            'method': 'GET',
            'url': server + '/api/commercials/global-recalculation-task'
        }).then(function(response){
            $scope.tasks = response.data;
            for(var i = 0; i < $scope.tasks.length; i++) {
                $scope.tasks[i].createdOn = new Date($scope.tasks[i].createdOn);
                $scope.tasks[i].startedOn = new Date($scope.tasks[i].startedOn);
                $scope.tasks[i].finishedOn = new Date($scope.tasks[i].finishedOn);
            }
        }, function(response){});
    };

    $scope.reloadTasks();
}]);
app.controller('userCreateController', ['$scope', '$interval', '$state', '$http', '$rootScope', function($scope, $interval, $state, $http, $rootScope) {
    $scope.editedUser = {
        'username': '',
        'password': '',
        'permissions': [
            {
                'offerId': '*',
                'mediaSource': '*',
                'action': 'ALL'
            }
        ]
    };
    $scope.submitForm = function () {
        $http({
            'url': server + '/api/users/',
            'method': 'POST',
            'data': $scope.editedUser
        }).then(function (response) {
            $state.go("user-list");
        }, function (response) {
            $state.go("user-list");
        });
    };

    $scope.addPermission = function () {
        $scope.editedUser.permissions.push({
            'offerId': '*',
            'mediaSource': '*',
            'action': 'ALL'
        });
    };

    $scope.removePermission = function (permission) {
        $scope.editedUser.permissions = $scope.editedUser.permissions.filter(function(existing){
            return !(existing.offerId == permission.offerId && existing.mediaSource == permission.mediaSource && existing.action == permission.action);
        });
    };
}]);
app.controller('userEditController', ['$scope', '$interval', '$state', '$http', '$rootScope', '$stateParams', function($scope, $interval, $state, $http, $rootScope, $stateParams) {
    $scope.userId = $stateParams.userId;
    $http({
        'url': server + '/api/users/' + $scope.userId + '/permissions',
        'method': 'GET'
    }).then(function (response) {
       $scope.editedUser = {'permissions': response.data}
    });

    $scope.submitForm = function () {
        $http({
            'url': server + '/api/users/' + $scope.userId +'/permissions',
            'method': 'PUT',
            'data': $scope.editedUser.permissions
        }).then(function (response) {
            $state.go("user-list");
        }, function (response) {
            $state.go("user-list");
        });
    }

    $scope.addPermission = function () {
        $scope.editedUser.permissions.push({
            'offerId': '*',
            'mediaSource': '*',
            'action': 'ALL'
        });
    };

    $scope.removePermission = function (permission) {
        $scope.editedUser.permissions = $scope.editedUser.permissions.filter(function(existing){
            return !(existing.offerId == permission.offerId && existing.mediaSource == permission.mediaSource && existing.action == permission.action);
        });
    };

}]);
app.controller('userListController', ['$scope', '$interval', '$state', '$http', '$rootScope', function($scope, $interval, $state, $http, $rootScope) {
    $http({
        'url': server + '/api/users/',
        'method': 'GET'
    }).then(function(response){
        console.log(response.data);
        $scope.users = response.data;
    });
}]);
app.directive('autoComplete', function($timeout){
    return function (scope, element, attributes) {
        $(element).autocomplete({
            source: function(request, response) {
                console.log(attributes.items);

                var array = scope[attributes.items];

                try {
                    var result = JSON.parse(attributes.items);
                    array = result;
                } catch (error) {
                    array = scope[attributes.items];
                }

                response(array.filter(function(arrayElement, index, array) {
                    return String(arrayElement).toLowerCase().indexOf(request.term.toLowerCase()) !== -1;
                }));
            },
            select: function(event, ui) {
                $timeout(function() {
                    var hierarchy = attributes.ngModel.split('.');
                    var object = scope[hierarchy[0]];
                    for(var i = 1; i < hierarchy.length - 1; i++) {
                        object = object[hierarchy[i]];
                    }

                    object[hierarchy[hierarchy.length - 1]] = ui.item.value;
                }, 0)
            }
        });
    }
});
app.directive('commercialDetailsMenu', function(){
    return {
        templateUrl: appPath + '/template/commercial_details_menu.html'
    };
});
app.directive('commercialForm', function() {
    return {
        templateUrl: appPath + '/template/commercial_form.html'
    }
});
app.directive('userForm', function() {
    return {
        templateUrl: appPath + '/template/user_form.html'
    }
});
app.directive('userPermissionsForm', function() {
    return {
        templateUrl: appPath + '/template/user_permissions_form.html'
    }
});
function Commercial() {
    this.id = null;
    this.offerId = "";
    this.mediaSource = "";
    this.dateStart = new Date();
    this.dateEnd = new Date();
    this.eventType = EventType.INSTALL;
    this.type = CommercialType.PAYOUT;
    this.isActive = true;
    this.conditions = [];
}

function CommercialBuilder() {
    this.commercial = new Commercial();

    this.withOfferId = function(offerId) {
        this.commercial.offerId = offerId;
        return this;
    };

    this.withMediaSource = function(mediaSource) {
        this.commercial.mediaSource = mediaSource;
        return this;
    };

    this.withDateStart = function(dateStart) {
        this.commercial.dateStart = dateStart;
        return this;
    };

    this.withDateEnd = function(dateEnd) {
        this.commercial.dateEnd = dateEnd;
        return this;
    };

    this.withEventType = function(eventType) {
        this.commercial.eventType = eventType;
        return this;
    };

    this.withCommercialType = function(commercialType) {
        this.commercial.type = commercialType;
        return this;
    };

    this.withActive = function(isActive) {
        this.commercial.isActive = isActive;
        return this;
    };

    this.withCondition = function(targetCondition) {
        this.conditions.push(targetCondition);
        return this;
    };

    this.build = function () {
        return this.commercial;
    }
}
CommercialType = {
    PAYOUT: 'PAYOUT',
    REVENUE: 'REVENUE'
};
EventType = {
    INSTALL: 'INSTALL',
    FIRST_DEPOSIT: 'FIRST_DEPOSIT',
    RETENTION_DEPOSIT: 'DEPOSIT',
    SIGN_UP: 'SIGN_UP'
};
Operator = {
    IN_LIST: 'IN_LIST',
    EQUALS: 'EQUALS'
};
function TargetCondition(operator, fieldName, fieldValue, isInverse) {
    this.operator = operator;
    this.fieldName = fieldName;
    this.fieldValue = fieldValue;
    this.isInverse = isInverse;
}
FIELD_NAMES_LIST = [
    'ad_id',
    'ad_name',
    'ad_type',
    'adset_id',
    'adset_name',
    'advertiser',
    'advertising_id',
    'agency_pmd',
    'android_id',
    'app_version',
    'appsflyer_device_id',
    'bid',
    'campaign_id',
    'campaign_name',
    'carrier',
    'channel',
    'city',
    'click_url',
    'contributor_1_campaign',
    'contributor_1_media_source',
    'contributor_2_campaign',
    'contributor_2_media_source',
    'contributor_3_campaign',
    'contributor_3_media_source',
    'cost',
    'cost_currency',
    'cost_model',
    'creative',
    'country_code',
    'currency',
    'customer_user_id',
    'device_name',
    'devise_type',
    'event_revenue',
    'event_source',
    'event_value',
    'gender',
    'http_referrer',
    'idfa',
    'idfv',
    'imei',
    'impression_url',
    'installer_package',
    'ip',
    'is_validated',
    'keywords',
    'language',
    'mac',
    'offer_name',
    'offer_preview_url',
    'offer_url',
    'operator',
    'os',
    'os_version',
    'platform_type',
    'receipt_id',
    'region',
    'reported_platform',
    'sdk_version',
    'site_id',
    'state',
    'sub_param_1',
    'sub_param_2',
    'sub_param_3',
    'sub_param_4',
    'sub_param_5',
    'targeting_group',
    'targeting_type',
    'wifi'
];